# -*- coding: utf-8 -*-
"""A4_project_v0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ckOZT1cEac19AEhnzBSHc-8ai2i5QG9p
"""

#%% imports

from PIL import Image
from matplotlib.pyplot import imshow
import matplotlib.pyplot as plt
import random
import copy
from torchvision import models, transforms
from torch.autograd import Variable
from torch.nn import functional as F
from torch import topk
from torch.tensor import flip
import numpy as np
import skimage.transform
import json

#%% definitions

class SaveFeatures():
    features=None
    def __init__(self, m): 
        self.hook = m.register_forward_hook(self.hook_fn)
    
    def hook_fn(self, module, input, output): 
        self.features = ((output.cpu()).data).numpy()
    
    def remove(self): 
        self.hook.remove()
  
def getCAM(feature_conv, weight_fc, class_idx):
    _, nc, h, w = feature_conv.shape
    cam = weight_fc[class_idx].dot(feature_conv.reshape((nc, h*w)))
    cam = cam.reshape(h, w)
    cam = cam - np.min(cam)
    cam_img = cam / np.max(cam)
    return [cam_img]

def noise(arrn, kind='gauss'):
    arr = copy.deepcopy(arrn)
    if kind == 'gauss':
        for i in range(len(arr)):
            for j in range(len(arr[i])):
                for k in range(len(arr[i, j])):
                    arr[i, j, k] += random.gauss(0, 1)
    elif kind == 'sp':
        for i in range(len(arr)):
            for j in range(len(arr[i])):#
                for k in range(len(arr[i, j])):
                    
                    temp = random.random()    
                    if temp < 0.1:
                        arr[i, j, k] = -2.5
                    elif temp > 0.9:
                        arr[i, j, k] = 2.5
    elif kind == 'flip':
        arr = arr.flip(1)
    return arr

#%% load model + label

model = models.resnet18(pretrained=True)
model.eval()

with open('A4/label.json', 'r') as f:
  lbl = json.loads(f.read())


#%% pre processing
images = []
images.append(Image.open("A4/cat_1.jpg"))
images.append(Image.open("A4/cat_car_0.jpg"))
images.append(Image.open("A4/truck_0.jpg"))


for image in images:
    
    # Imagenet mean/std
    
    normalize = transforms.Normalize(
       mean=[0.485, 0.456, 0.406],
       std=[0.229, 0.224, 0.225]
    )
    
    # Preprocessing - scale to 224x224 for model, convert to tensor, 
    # and normalize to -1..1 with mean/std for ImageNet
    preprocess = transforms.Compose([
       transforms.Resize((224,224)),
       transforms.ToTensor(),
       normalize
    ])
    
    display_transform = transforms.Compose([transforms.Resize((224,224))])
    
    tensor_original = preprocess(image)
    
    new_tensors = []
    #new_tensors.append(tensor_original)
    #new_tensors.append(noise(tensor_original, 'gauss'))
    #new_tensors.append(noise(tensor_original, 'sp'))
    new_tensors.append(noise(tensor_original, 'flip'))
    
    #%
    for tensor in new_tensors:
        
        imshow(np.transpose(tensor.numpy(), (1, 2, 0)))
        plt.show()
        
        prediction_var = Variable((tensor.unsqueeze(0)), requires_grad=True)
        
        
        final_layer = model._modules.get('layer4')
        activated_features = SaveFeatures(final_layer)
        prediction = model(prediction_var)
        pred_probabilities = F.softmax(prediction).data.squeeze()
        activated_features.remove()
        #topk(pred_probabilities,1)
        
        weight_softmax_params = list(model._modules.get('fc').parameters())
        weight_softmax = np.squeeze(weight_softmax_params[0].cpu().data.numpy())
        
        
        
        #% plot
        
        class_idx = topk(pred_probabilities,1)[1].int()
        overlay = getCAM(activated_features.features, weight_softmax, class_idx )
        imshow(overlay[0], alpha=0.5, cmap='jet')
        plt.show()
        
        imshow(np.transpose(tensor.numpy(), (1, 2, 0)))#display_transform(tensor))
        imshow(skimage.transform.resize(overlay[0], tensor.shape[1:3]), alpha=0.5, cmap='jet');
        plt.show()
        
        class_pred = topk(pred_probabilities,10)
        class_idx = class_pred[1].int()
        class_val = class_pred[0]
        weights = class_val.numpy() * 100
        idx = [lbl[str(i)][1] for i in class_idx.numpy()]
        plt.hist(idx, weights=weights, ec='k')
        plt.grid()
        plt.xticks(rotation=45)
        plt.show()



